pipeline {
    agent any
    tools {
        maven "MAVEN3.9"
        jdk "JDK17"
    }
    
    environment {
        SNAP_REPO = 'vprofile-snapshot'
		NEXUS_USER = 'admin'
		NEXUS_PASS = 'admin123'
		RELEASE_REPO = 'vprofile-release'
		CENTRAL_REPO = 'vpro-maven-central'
		NEXUSIP = '172.31.249.96'
		NEXUSPORT = '8081'
		NEXUS_GRP_REPO = 'vpro-maven-group'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        SLACK_CHANNEL = '#jenkinsci' // Channel name in Slack
        SLACK_CREDENTIAL_ID = 'slackbot-token' // ID in Jenkins Credentials
        registryCredential = 'ecr:us-west-1:awscreds'
        appRegistry = '739275440836.dkr.ecr.us-west-1.amazonaws.com/vprofileaapimg'
        vprofileRegistry = 'https://739275440836.dkr.ecr.us-west-1.amazonaws.com'
    }
    stages {
        stage('Build'){
            steps {
                sh 'mvn -s settings.xml -DskipTests install -U'
            }
            post {
                success {
                   echo 'Now  archiving the dammn artifacts'
                   archiveArtifacts artifacts: '**/*.war'}
                
            }
        }
        stage('Test'){
            steps {
                sh 'mvn install -s settings.xml'

            }
        }
        stage('SonarQube Analysis') {
            steps {
             sh 'mvn checkstyle:checkstyle -s settings.xml'   
            }
        }
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
               withSonarQubeEnv("${SONARSERVER}") {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }
        stage('Quality Gate'){
          steps {
            timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
            }

          } 
        }
        stage('UploadArtifact') {
            steps {
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: "${RELEASE_REPO}",
                  credentialsId: "${NEXUS_LOGIN}",
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
               ] 
    )
            }
        }

        stage("Build App image") {
            steps {
                script{
                    dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER", "../Docker-files/app/multistage/" )

                }
                
            }
        }

        stage ("Upload App image to ECR") {
            steps {
                script {
                   docker.withRegistry(vprofileRegistry,registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push("latest")
                   }
                }
            }
        }



    }
     post {
        success {
            slackSend(
                channel: "${env.SLACK_CHANNEL}",
                color: 'good',
                message: "✅ Job *${env.JOB_NAME}* #${env.BUILD_NUMBER} succeeded.\nCheck: ${env.BUILD_URL}",
                tokenCredentialId: "${env.SLACK_CREDENTIAL_ID}",
                
                baseUrl: 'https://slack.com/api/',
                botUser: true
            )
        }

        failure {
            slackSend(
                channel: "${env.SLACK_CHANNEL}",
                color: 'danger',
                message: "❌ Job *${env.JOB_NAME}* #${env.BUILD_NUMBER} failed!\nCheck: ${env.BUILD_URL}",
                tokenCredentialId: "${env.SLACK_CREDENTIAL_ID}",
                baseUrl: 'https://slack.com/api/',
                botUser: true
            )
        }

        always {
            echo 'Pipeline completed.'
        }
    }

}